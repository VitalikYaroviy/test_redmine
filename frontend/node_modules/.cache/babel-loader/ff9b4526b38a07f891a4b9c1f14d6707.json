{"ast":null,"code":"import { put, call, takeLatest } from 'redux-saga/effects'; // import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions';\n\nfunction* getJobs(api, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`);\n    yield put(actions.getJobsSuccess(resource, detail, thunk));\n  } catch (e) {\n    yield put(actions.getJobsFailure(resource, e, thunk));\n  }\n}\n\nfunction* createJob(api, {\n  data\n}, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.post], `/${resource}`, data);\n    yield put(actions.jobCreateSuccess(resource, detail, {\n      data\n    }, thunk));\n  } catch (e) {\n    yield put(actions.jobCreateFailure(resource, e, {\n      data\n    }, thunk));\n  }\n}\n\nfunction* deleteJob(api, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.delete], `/${resource}`);\n    yield put(actions.jobDeleteSuccess(resource, detail, thunk)); // toastr.success('Success', 'You successfully loggout!')\n  } catch (e) {\n    yield put(actions.jobDeleteFailure(resource, e, thunk)); // toastr.error('Oops! Something went wrong...')\n  }\n}\n\nfunction* getFiltersJobs(api, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`);\n    yield put(actions.getFiltersJobsSuccess(resource, detail, thunk));\n  } catch (e) {\n    yield put(actions.getFiltersJobsFailure(resource, e, thunk));\n  }\n}\n\nfunction* watchGetJobsRequest(api, {\n  meta\n}) {\n  yield call(getJobs, api, meta);\n}\n\nfunction* watchCreateJobRequest(api, {\n  payload,\n  meta\n}) {\n  yield call(createJob, api, payload, meta);\n}\n\nfunction* watchJobDeleteRequest(api, {\n  meta\n}) {\n  yield call(deleteJob, api, meta);\n}\n\nfunction* watchGetFiltersJobsRequest(api, {\n  meta\n}) {\n  yield call(getFiltersJobs, api, meta);\n}\n\nexport default function* ({\n  api\n}) {\n  yield takeLatest(actions.GET_JOBS_REQUEST, watchGetJobsRequest, api);\n  yield takeLatest(actions.CREATE_JOB_REQUEST, watchCreateJobRequest, api);\n  yield takeLatest(actions.DELETE_JOB_REQUEST, watchJobDeleteRequest, api);\n  yield takeLatest(actions.GET_FILTERS_JOBS_REQUEST, watchGetFiltersJobsRequest, api);\n}","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/store/jobs/sagas.js"],"names":["put","call","takeLatest","actions","getJobs","api","resource","thunk","detail","get","getJobsSuccess","e","getJobsFailure","createJob","data","post","jobCreateSuccess","jobCreateFailure","deleteJob","delete","jobDeleteSuccess","jobDeleteFailure","getFiltersJobs","getFiltersJobsSuccess","getFiltersJobsFailure","watchGetJobsRequest","meta","watchCreateJobRequest","payload","watchJobDeleteRequest","watchGetFiltersJobsRequest","GET_JOBS_REQUEST","CREATE_JOB_REQUEST","DELETE_JOB_REQUEST","GET_FILTERS_JOBS_REQUEST"],"mappings":"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","sourcesContent":["import { put, call, takeLatest } from 'redux-saga/effects'\n// import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions'\n\nfunction* getJobs(api, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`)\n    yield put(actions.getJobsSuccess(resource, detail, thunk))\n  } catch (e) {\n    yield put(actions.getJobsFailure(resource, e, thunk))\n  }\n}\n\nfunction* createJob(api, { data }, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.post], `/${resource}`,  data)\n    yield put(actions.jobCreateSuccess(resource, detail, { data }, thunk))\n  } catch (e) {\n    yield put(actions.jobCreateFailure(resource, e, { data }, thunk))\n  }\n}\n\nfunction* deleteJob(api, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.delete], `/${resource}`)\n    yield put(actions.jobDeleteSuccess(resource, detail, thunk))\n    // toastr.success('Success', 'You successfully loggout!')\n  } catch (e) {\n    yield put(actions.jobDeleteFailure(resource, e, thunk))\n    // toastr.error('Oops! Something went wrong...')\n  }\n}\n\nfunction* getFiltersJobs(api, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`)\n    yield put(actions.getFiltersJobsSuccess(resource, detail, thunk))\n  } catch (e) {\n    yield put(actions.getFiltersJobsFailure(resource, e, thunk))\n  }\n}\n\nfunction* watchGetJobsRequest(api, { meta }) {\n  yield call(getJobs, api, meta)\n}\n\nfunction* watchCreateJobRequest(api, { payload, meta }) {\n  yield call(createJob, api, payload, meta)\n}\n\nfunction* watchJobDeleteRequest(api, { meta }) {\n  yield call(deleteJob, api, meta)\n}\n\nfunction* watchGetFiltersJobsRequest(api, { meta }) {\n  yield call(getFiltersJobs, api, meta)\n}\n\n\nexport default function* ({ api }) {\n  yield takeLatest(actions.GET_JOBS_REQUEST, watchGetJobsRequest, api)\n  yield takeLatest(actions.CREATE_JOB_REQUEST, watchCreateJobRequest, api)\n  yield takeLatest(actions.DELETE_JOB_REQUEST, watchJobDeleteRequest, api)\n  yield takeLatest(actions.GET_FILTERS_JOBS_REQUEST, watchGetFiltersJobsRequest, api)\n}"]},"metadata":{},"sourceType":"module"}