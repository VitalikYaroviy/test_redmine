{"ast":null,"code":"var _jsxFileName = \"/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Developer } from '../components';\nimport { sessionDeleteRequest, getUsersRequest } from '../store/sessions/actions';\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest, getFiltersJobsRequest } from '../store/jobs/actions';\nimport { history } from '../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeveloperContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [value, setValue] = useState('');\n  const [startDate, setStartDate] = useState(new Date());\n  const [open, setModalOpen] = useState(false);\n  const [usersArray, setUsersArray] = useState([]);\n  const [bla, setBla] = useState('');\n  const {\n    data,\n    users\n  } = useSelector(state => state.sessions);\n  const {\n    jobsData\n  } = useSelector(state => state.jobs);\n  useEffect(() => {\n    if (data.attributes.isAdmin) dispatch(getUsersRequest('users'));\n  }, []);\n  useEffect(() => {\n    if (users.length) {\n      const usersData = [];\n      users.map(item => {\n        usersData.push({\n          value: item.name.toLowerCase(),\n          label: item.name\n        });\n      });\n      setUsersArray(usersData);\n    }\n  }, [users]);\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    // if (isFirstRun.current) {\n    //   isFirstRun.current = false;\n    //   return;\n    // }\n    if (data.attributes.isAdmin) {\n      const date = new moment.utc(startDate).format('YYYY-MM-DD HH:mm:ss Z');\n      let url = `admin/jobs?date=${date}`;\n\n      if (selectedProject && selectedProject.value.length) {\n        url += `&name=${selectedProject.value}`;\n      }\n\n      if (selectedCategory && selectedCategory.value.length) {\n        url += `&category=${selectedCategory.value}`;\n      }\n\n      if (selectedUser && selectedUser.value.length) {\n        users.map(i => {\n          if (i.name === selectedUser.label) {\n            url += `&user_id=${i.id}`;\n          }\n        });\n      }\n\n      console.log('gnvbnvbnvb', url);\n      setBla(url);\n      dispatch(getFiltersJobsRequest(url));\n    }\n  }, [data, startDate, selectedProject, selectedCategory, selectedUser]);\n  useEffect(() => {\n    if (!data.attributes.isAdmin) {\n      dispatch(getJobsRequest(`jobs?date=${moment(startDate).format('DD-MM-YYYY hh:mm:ss')}`));\n    }\n  }, [startDate]);\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'));\n  };\n\n  const handleChange = e => {\n    const financialGoal = e.target.validity.valid ? e.target.value : value;\n    setValue(financialGoal);\n  };\n\n  const create = () => {\n    const sendData = {\n      name: selectedProject.value,\n      category: selectedCategory.value,\n      hours: value,\n      user_id: data.id\n    };\n    dispatch(jobCreateRequest('jobs', sendData));\n    setSelectedProject(null);\n    setSelectedCategory(null);\n    setValue('');\n  };\n\n  const remove = id => {\n    dispatch(jobDeleteRequest(`jobs/${id}`));\n  };\n\n  const clearFilter = key => {\n    // console.log(bla.split(`&${key}=${selectedProject.value}`).join(''))\n    if (key === 'name') {\n      setSelectedProject(null);\n    } else if (key === 'category') {\n      setSelectedCategory(null);\n    } else {\n      setSelectedUser(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Developer, {\n    logOut: logOut,\n    user: data.attributes,\n    selectedProject: selectedProject,\n    setSelectedProject: setSelectedProject,\n    selectedCategory: selectedCategory,\n    setSelectedCategory: setSelectedCategory,\n    setValue: setValue,\n    value: value,\n    handleChange: handleChange,\n    create: create,\n    jobsData: jobsData,\n    remove: remove,\n    startDate: startDate,\n    setStartDate: setStartDate,\n    usersArray: usersArray,\n    selectedUser: selectedUser,\n    setSelectedUser: setSelectedUser,\n    users: users,\n    clearFilter: clearFilter,\n    open: open,\n    setModalOpen: setModalOpen\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeveloperContainer, \"ptCMuESnabzWUhsbRH8MbvTgBnI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = DeveloperContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeveloperContainer\");","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","moment","Developer","sessionDeleteRequest","getUsersRequest","getJobsRequest","jobCreateRequest","jobDeleteRequest","getFiltersJobsRequest","history","DeveloperContainer","dispatch","selectedProject","setSelectedProject","selectedCategory","setSelectedCategory","selectedUser","setSelectedUser","value","setValue","startDate","setStartDate","Date","open","setModalOpen","usersArray","setUsersArray","bla","setBla","data","users","state","sessions","jobsData","jobs","attributes","isAdmin","length","usersData","map","item","push","name","toLowerCase","label","isFirstRun","date","utc","format","url","i","id","console","log","logOut","handleChange","e","financialGoal","target","validity","valid","create","sendData","category","hours","user_id","remove","clearFilter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Developer } from '../components'\nimport { sessionDeleteRequest, getUsersRequest } from '../store/sessions/actions'\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest, getFiltersJobsRequest } from '../store/jobs/actions'\nimport { history } from '../services'\n\nexport const DeveloperContainer = () => {\n  const dispatch = useDispatch()\n\n  const [selectedProject, setSelectedProject] = useState(null)\n  const [selectedCategory, setSelectedCategory] = useState(null)\n  const [selectedUser, setSelectedUser] = useState(null)\n  const [value, setValue] = useState('')\n  const [startDate, setStartDate] = useState(new Date())\n  const [open, setModalOpen] = useState(false)\n\n  const [usersArray, setUsersArray] = useState([])\n\n  const [bla, setBla] = useState('')\n\n  const { data, users } = useSelector(state => state.sessions)\n  const { jobsData } = useSelector(state => state.jobs)\n\n  useEffect(() => {\n    if (data.attributes.isAdmin) dispatch(getUsersRequest('users'))\n  }, [])\n    \n  useEffect(() => {\n    if (users.length) {\n      const usersData =  [];\n      users.map(item => {\n        usersData.push({ value: item.name.toLowerCase(), label: item.name })\n      })\n      setUsersArray(usersData)\n    }\n  }, [users])\n\n  const isFirstRun = useRef(true);\n  useEffect (() => {\n    // if (isFirstRun.current) {\n    //   isFirstRun.current = false;\n    //   return;\n    // }\n    if (data.attributes.isAdmin) {\n      const date = new moment.utc(startDate).format('YYYY-MM-DD HH:mm:ss Z')\n      let url = `admin/jobs?date=${date}`\n      if (selectedProject && selectedProject.value.length ) {\n        url += `&name=${selectedProject.value}`\n      }\n      if (selectedCategory && selectedCategory.value.length) {\n        url += `&category=${selectedCategory.value}`\n      }\n      if (selectedUser && selectedUser.value.length) {\n        users.map(i => {\n          if (i.name === selectedUser.label) {\n            url += `&user_id=${i.id}`\n          }\n        })\n      }\n  \n      console.log('gnvbnvbnvb', url)\n      setBla(url)\n      dispatch(getFiltersJobsRequest(url))\n    }\n  }, [data, startDate, selectedProject, selectedCategory, selectedUser]);\n\n\n  useEffect(() => {\n    if (!data.attributes.isAdmin) {\n      dispatch(getJobsRequest(`jobs?date=${moment(startDate).format('DD-MM-YYYY hh:mm:ss')}`))\n    }\n  }, [startDate])\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'))\n  }\n\n  const handleChange = (e) => {\n    const financialGoal = (e.target.validity.valid) ? e.target.value : value\n    setValue(financialGoal)\n  }\n\n  const create = () => {\n    const sendData = { name: selectedProject.value, category: selectedCategory.value, hours: value, user_id: data.id }\n    dispatch(jobCreateRequest('jobs', sendData))\n    setSelectedProject(null)\n    setSelectedCategory(null)\n    setValue('')\n  }\n\n  const remove = id => {\n    dispatch(jobDeleteRequest(`jobs/${id}`))\n  }\n\n  const clearFilter = (key) => {\n    // console.log(bla.split(`&${key}=${selectedProject.value}`).join(''))\n    if (key === 'name') {\n      setSelectedProject(null)\n    } else if (key === 'category') {\n      setSelectedCategory(null)\n    } else {\n      setSelectedUser(null)\n    }\n  }\n\n  return (\n    <Developer\n      logOut={ logOut }\n      user={ data.attributes }\n      selectedProject={ selectedProject }\n      setSelectedProject={ setSelectedProject }\n      selectedCategory={ selectedCategory }\n      setSelectedCategory={ setSelectedCategory }\n      setValue={ setValue }\n      value={ value }\n      handleChange={ handleChange }\n      create={ create }\n      jobsData={ jobsData }\n      remove={ remove }\n      startDate={ startDate }\n      setStartDate={ setStartDate }\n      usersArray={ usersArray }\n      selectedUser={ selectedUser }\n      setSelectedUser={ setSelectedUser }\n      users={ users }\n      clearFilter={ clearFilter }\n      open={ open }\n      setModalOpen={ setModalOpen }\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}