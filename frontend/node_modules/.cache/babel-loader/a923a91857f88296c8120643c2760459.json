{"ast":null,"code":"var _jsxFileName = \"/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from 'lodash.isempty';\nimport { Developer } from '../components';\nimport { sessionDeleteRequest } from '../store/sessions/actions';\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest } from '../store/jobs/actions'; // import { history } from '../../services'\n// const initialState = {\n//   email: '',\n//   password: ''\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeveloperContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [value, setValue] = useState('');\n  const {\n    data\n  } = useSelector(state => state.sessions);\n  const {\n    jobsData\n  } = useSelector(state => state.jobs);\n  useEffect(() => {\n    dispatch(getJobsRequest('jobs'));\n  }, []); // const handleChange = (key, text) => {\n  //   setValue({...value, [key]: text})\n  //   // errorsState[key] && setErrorsState({...errorsState, [key]: ''})\n  // }\n  // useEffect(() => {\n  //   if (!isEmpty(data)) {\n  //     console.log('wedfwedwedf')\n  //   }\n  // }, [data])\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'));\n  };\n\n  const handleChange = e => {\n    const financialGoal = e.target.validity.valid ? e.target.value : value;\n    setValue(financialGoal);\n  };\n\n  const create = () => {\n    const sendData = {\n      name: selectedProject.value,\n      category: selectedCategory.value,\n      hours: value,\n      user_id: data.user.id\n    };\n    dispatch(jobCreateRequest('jobs', sendData));\n  };\n\n  const remove = id => {\n    dispatch(jobDeleteRequest('jobs', id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Developer, {\n    logOut: logOut,\n    user: data.user,\n    selectedProject: selectedProject,\n    setSelectedProject: setSelectedProject,\n    selectedCategory: selectedCategory,\n    setSelectedCategory: setSelectedCategory,\n    setValue: setValue,\n    value: value,\n    handleChange: handleChange,\n    create: create,\n    jobsData: jobsData,\n    remove: remove\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeveloperContainer, \"1lV9/rXm1CecarUXR43W2YSRunI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = DeveloperContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeveloperContainer\");","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","isEmpty","Developer","sessionDeleteRequest","getJobsRequest","jobCreateRequest","jobDeleteRequest","DeveloperContainer","dispatch","selectedProject","setSelectedProject","selectedCategory","setSelectedCategory","value","setValue","data","state","sessions","jobsData","jobs","logOut","handleChange","e","financialGoal","target","validity","valid","create","sendData","name","category","hours","user_id","user","id","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,gBAA3C,QAAmE,uBAAnE,C,CACA;AAEA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACc,gBAAD,EAAmBC,mBAAnB,IAA0Cf,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM;AAAEkB,IAAAA;AAAF,MAAWf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,QAAhB,CAA5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAelB,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACJ,cAAc,CAAC,MAAD,CAAf,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT,CAVsC,CActC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMgB,MAAM,GAAG,MAAM;AACnBZ,IAAAA,QAAQ,CAACL,oBAAoB,CAAC,iBAAD,CAArB,CAAR;AACD,GAFD;;AAIA,QAAMkB,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAMC,aAAa,GAAID,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBC,KAAnB,GAA4BJ,CAAC,CAACE,MAAF,CAASX,KAArC,GAA6CA,KAAnE;AACAC,IAAAA,QAAQ,CAACS,aAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,MAAM,GAAG,MAAM;AACnB,UAAMC,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAEpB,eAAe,CAACI,KAAxB;AAA+BiB,MAAAA,QAAQ,EAAEnB,gBAAgB,CAACE,KAA1D;AAAiEkB,MAAAA,KAAK,EAAElB,KAAxE;AAA+EmB,MAAAA,OAAO,EAAEjB,IAAI,CAACkB,IAAL,CAAUC;AAAlG,KAAjB;AACA1B,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,MAAD,EAASuB,QAAT,CAAjB,CAAR;AACD,GAHD;;AAKA,QAAMO,MAAM,GAAGD,EAAE,IAAI;AACnB1B,IAAAA,QAAQ,CAACF,gBAAgB,CAAC,MAAD,EAAS4B,EAAT,CAAjB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,SAAD;AACE,IAAA,MAAM,EAAGd,MADX;AAEE,IAAA,IAAI,EAAGL,IAAI,CAACkB,IAFd;AAGE,IAAA,eAAe,EAAGxB,eAHpB;AAIE,IAAA,kBAAkB,EAAGC,kBAJvB;AAKE,IAAA,gBAAgB,EAAGC,gBALrB;AAME,IAAA,mBAAmB,EAAGC,mBANxB;AAOE,IAAA,QAAQ,EAAGE,QAPb;AAQE,IAAA,KAAK,EAAGD,KARV;AASE,IAAA,YAAY,EAAGQ,YATjB;AAUE,IAAA,MAAM,EAAGM,MAVX;AAWE,IAAA,QAAQ,EAAGT,QAXb;AAYE,IAAA,MAAM,EAAGiB;AAZX;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA3DM;;GAAM5B,kB;UACMR,W,EAMAC,W,EACIA,W;;;KARVO,kB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport isEmpty from 'lodash.isempty'\n\nimport { Developer } from '../components'\nimport { sessionDeleteRequest } from '../store/sessions/actions'\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest } from '../store/jobs/actions'\n// import { history } from '../../services'\n\n// const initialState = {\n//   email: '',\n//   password: ''\n// }\n\nexport const DeveloperContainer = () => {\n  const dispatch = useDispatch()\n\n  const [selectedProject, setSelectedProject] = useState(null)\n  const [selectedCategory, setSelectedCategory] = useState(null)\n  const [value, setValue] = useState('')\n\n  const { data } = useSelector(state => state.sessions)\n  const { jobsData } = useSelector(state => state.jobs)\n\n  useEffect(() => {\n    dispatch(getJobsRequest('jobs'))\n  }, [])\n\n  // const handleChange = (key, text) => {\n  //   setValue({...value, [key]: text})\n  //   // errorsState[key] && setErrorsState({...errorsState, [key]: ''})\n  // }\n\n  // useEffect(() => {\n  //   if (!isEmpty(data)) {\n  //     console.log('wedfwedwedf')\n  //   }\n  // }, [data])\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'))\n  }\n\n  const handleChange = (e) => {\n    const financialGoal = (e.target.validity.valid) ? e.target.value : value\n    setValue(financialGoal)\n  }\n\n  const create = () => {\n    const sendData = { name: selectedProject.value, category: selectedCategory.value, hours: value, user_id: data.user.id }\n    dispatch(jobCreateRequest('jobs', sendData))\n  }\n\n  const remove = id => {\n    dispatch(jobDeleteRequest('jobs', id))\n  }\n\n  return (\n    <Developer\n      logOut={ logOut }\n      user={ data.user }\n      selectedProject={ selectedProject }\n      setSelectedProject={ setSelectedProject }\n      selectedCategory={ selectedCategory }\n      setSelectedCategory={ setSelectedCategory }\n      setValue={ setValue }\n      value={ value }\n      handleChange={ handleChange }\n      create={ create }\n      jobsData={ jobsData }\n      remove={ remove }\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}