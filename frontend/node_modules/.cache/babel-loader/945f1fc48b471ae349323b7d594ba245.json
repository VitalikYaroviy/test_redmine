{"ast":null,"code":"var _jsxFileName = \"/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Developer } from '../components';\nimport { sessionDeleteRequest, getUsersRequest } from '../store/sessions/actions';\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest } from '../store/jobs/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeveloperContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [value, setValue] = useState('');\n  const [startDate, setStartDate] = useState(new Date());\n  const [usersArray, setUsersArray] = useState([]);\n  const {\n    data,\n    users\n  } = useSelector(state => state.sessions);\n  const {\n    jobsData\n  } = useSelector(state => state.jobs);\n  useEffect(() => {\n    if (!data.attributes.isAdmin) dispatch(getUsersRequest('users'));\n  }, []);\n  useEffect(() => {\n    if (users.length) {\n      const usersData = [];\n      users.map(item => {\n        usersData.push({\n          value: item.name.toLowerCase(),\n          label: item.name\n        });\n      });\n      setUsersArray(usersData);\n    }\n  }, [users]);\n  useEffect(() => {\n    // if (!data.attributes.isAdmin) dispatch(getUsersRequest('users'))\n    console.log('tytytyt', selectedUser.value, selectedProject.value, selectedCategory.value);\n  }, [selectedProject, selectedCategory, selectedUser]);\n  useEffect(() => {\n    dispatch(getJobsRequest(`jobs?date=${moment(startDate).format('DD-MM-YYYY hh:mm:ss')}`));\n  }, [startDate]);\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'));\n  };\n\n  const handleChange = e => {\n    const financialGoal = e.target.validity.valid ? e.target.value : value;\n    setValue(financialGoal);\n  };\n\n  const create = () => {\n    const sendData = {\n      name: selectedProject.value,\n      category: selectedCategory.value,\n      hours: value,\n      user_id: data.id\n    };\n    dispatch(jobCreateRequest('jobs', sendData));\n    setSelectedProject(null);\n    setSelectedCategory(null);\n    setValue('');\n  };\n\n  const remove = id => {\n    dispatch(jobDeleteRequest(`jobs/${id}`));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Developer, {\n    logOut: logOut,\n    user: data.attributes,\n    selectedProject: selectedProject,\n    setSelectedProject: setSelectedProject,\n    selectedCategory: selectedCategory,\n    setSelectedCategory: setSelectedCategory,\n    setValue: setValue,\n    value: value,\n    handleChange: handleChange,\n    create: create,\n    jobsData: jobsData,\n    remove: remove,\n    startDate: startDate,\n    setStartDate: setStartDate,\n    usersArray: usersArray,\n    selectedUser: selectedUser,\n    setSelectedUser: setSelectedUser,\n    users: users\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeveloperContainer, \"NBLFmABoSiyyaTNnBJpXsGuamDg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = DeveloperContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeveloperContainer\");","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/containers/DeveloperContainer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","moment","Developer","sessionDeleteRequest","getUsersRequest","getJobsRequest","jobCreateRequest","jobDeleteRequest","DeveloperContainer","dispatch","selectedProject","setSelectedProject","selectedCategory","setSelectedCategory","selectedUser","setSelectedUser","value","setValue","startDate","setStartDate","Date","usersArray","setUsersArray","data","users","state","sessions","jobsData","jobs","attributes","isAdmin","length","usersData","map","item","push","name","toLowerCase","label","console","log","format","logOut","handleChange","e","financialGoal","target","validity","valid","create","sendData","category","hours","user_id","id","remove"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Developer } from '../components'\nimport { sessionDeleteRequest, getUsersRequest } from '../store/sessions/actions'\nimport { getJobsRequest, jobCreateRequest, jobDeleteRequest } from '../store/jobs/actions'\n\nexport const DeveloperContainer = () => {\n  const dispatch = useDispatch()\n\n  const [selectedProject, setSelectedProject] = useState(null)\n  const [selectedCategory, setSelectedCategory] = useState(null)\n  const [selectedUser, setSelectedUser] = useState(null)\n  const [value, setValue] = useState('')\n  const [startDate, setStartDate] = useState(new Date())\n\n  const [usersArray, setUsersArray] = useState([])\n\n  const { data, users } = useSelector(state => state.sessions)\n  const { jobsData } = useSelector(state => state.jobs)\n\n  useEffect(() => {\n    if (!data.attributes.isAdmin) dispatch(getUsersRequest('users'))\n  }, [])\n\n  useEffect(() => {\n    if (users.length) {\n      const usersData =  [];\n      users.map(item => {\n        usersData.push({ value: item.name.toLowerCase(), label: item.name })\n      })\n      setUsersArray(usersData)\n    }\n  }, [users])\n\n  useEffect(() => {\n    // if (!data.attributes.isAdmin) dispatch(getUsersRequest('users'))\n    console.log('tytytyt', selectedUser.value, selectedProject.value, selectedCategory.value)\n  }, [selectedProject, selectedCategory, selectedUser])\n\n\n  useEffect(() => {\n    dispatch(getJobsRequest(`jobs?date=${moment(startDate).format('DD-MM-YYYY hh:mm:ss')}`))\n  }, [startDate])\n\n  const logOut = () => {\n    dispatch(sessionDeleteRequest('authentications'))\n  }\n\n  const handleChange = (e) => {\n    const financialGoal = (e.target.validity.valid) ? e.target.value : value\n    setValue(financialGoal)\n  }\n\n  const create = () => {\n    const sendData = { name: selectedProject.value, category: selectedCategory.value, hours: value, user_id: data.id }\n    dispatch(jobCreateRequest('jobs', sendData))\n    setSelectedProject(null)\n    setSelectedCategory(null)\n    setValue('')\n  }\n\n  const remove = id => {\n    dispatch(jobDeleteRequest(`jobs/${id}`))\n  }\n\n  return (\n    <Developer\n      logOut={ logOut }\n      user={ data.attributes }\n      selectedProject={ selectedProject }\n      setSelectedProject={ setSelectedProject }\n      selectedCategory={ selectedCategory }\n      setSelectedCategory={ setSelectedCategory }\n      setValue={ setValue }\n      value={ value }\n      handleChange={ handleChange }\n      create={ create }\n      jobsData={ jobsData }\n      remove={ remove }\n      startDate={ startDate }\n      setStartDate={ setStartDate }\n      usersArray={ usersArray }\n      selectedUser={ selectedUser }\n      setSelectedUser={ setSelectedUser }\n      users={ users }\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}