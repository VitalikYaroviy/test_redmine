{"ast":null,"code":"var _jsxFileName = \"/home/vitalik/work/test/ideaboard-api/frontend/src/services/Session.js\";\n// import React, { useEffect } from 'react'\n// import { useDispatch, useSelector } from 'react-redux'\n// import isEmpty from 'lodash.isempty'\n// import PublicRoutes from '../routes/PublicRoutes'\n// import PrivateRoutes from '../routes/PrivateRoutes'\n// import { sessionShowRequest } from '../store/sessions/actions'\n// const Session = () => {\n//   const dispatch = useDispatch()\n//   const { data, loading } = useSelector(state => state.sessions)\n//   useEffect(() => {\n//     if (!loading) {\n//       console.log('wedfwedwedf')\n//       dispatch(sessionShowRequest('authentications'))\n//     }\n//   }, [loading])\n//   return !isEmpty(data) ? <PrivateRoutes /> : <PublicRoutes/>\n// }\n// export default Session\nimport React, { Component } from 'react';\nimport isEmpty from 'lodash.isempty';\nimport { connect } from 'react-redux';\nimport PublicRoutes from '../routes/PublicRoutes';\nimport PrivateRoutes from '../routes/PrivateRoutes';\nimport { sessionShowRequest } from '../store/sessions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Session extends Component {\n  componentDidMount() {\n    this.props.getUser();\n  }\n\n  render() {\n    const {\n      currentUser,\n      loading\n    } = this.props;\n    if (loading) return null;\n    if (!isEmpty(currentUser)) return /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(PublicRoutes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => (console.log(state), {\n  currentUser: state.session.data,\n  loading: state.session.loading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getUser: () => dispatch(sessionShowRequest('authentications'))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Session);","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/services/Session.js"],"names":["React","Component","isEmpty","connect","PublicRoutes","PrivateRoutes","sessionShowRequest","Session","componentDidMount","props","getUser","render","currentUser","loading","mapStateToProps","state","console","log","session","data","mapDispatchToProps","dispatch"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,SAASC,kBAAT,QAAmC,2BAAnC;;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAC9BO,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,OAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA2B,KAAKJ,KAAtC;AACA,QAAII,OAAJ,EAAa,OAAO,IAAP;AACb,QAAI,CAACX,OAAO,CAACU,WAAD,CAAZ,EAA2B,oBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AAC3B,wBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAV6B;;AAahC,MAAME,eAAe,GAAIC,KAAD,KAAaC,OAAO,CAACC,GAAR,CAAYF,KAAZ,GAAoB;AACvDH,EAAAA,WAAW,EAAEG,KAAK,CAACG,OAAN,CAAcC,IAD4B;AAEvDN,EAAAA,OAAO,EAAEE,KAAK,CAACG,OAAN,CAAcL;AAFgC,CAAjC,CAAxB;;AAKA,MAAMO,kBAAkB,GAAIC,QAAD,KAAe;AACxCX,EAAAA,OAAO,EAAE,MAAMW,QAAQ,CAACf,kBAAkB,CAAC,iBAAD,CAAnB;AADiB,CAAf,CAA3B;;AAIA,eAAeH,OAAO,CAACW,eAAD,EAAkBM,kBAAlB,CAAP,CAA6Cb,OAA7C,CAAf","sourcesContent":["// import React, { useEffect } from 'react'\n// import { useDispatch, useSelector } from 'react-redux'\n// import isEmpty from 'lodash.isempty'\n\n// import PublicRoutes from '../routes/PublicRoutes'\n// import PrivateRoutes from '../routes/PrivateRoutes'\n// import { sessionShowRequest } from '../store/sessions/actions'\n\n// const Session = () => {\n//   const dispatch = useDispatch()\n\n//   const { data, loading } = useSelector(state => state.sessions)\n\n//   useEffect(() => {\n//     if (!loading) {\n//       console.log('wedfwedwedf')\n//       dispatch(sessionShowRequest('authentications'))\n//     }\n//   }, [loading])\n\n//   return !isEmpty(data) ? <PrivateRoutes /> : <PublicRoutes/>\n// }\n\n// export default Session\n\nimport React, { Component } from 'react'\nimport isEmpty from 'lodash.isempty'\nimport { connect } from 'react-redux'\n\nimport PublicRoutes from '../routes/PublicRoutes'\nimport PrivateRoutes from '../routes/PrivateRoutes'\n\nimport { sessionShowRequest } from '../store/sessions/actions'\n\nclass Session extends Component {\n  componentDidMount() {\n    this.props.getUser()\n  }\n\n  render() {\n    const { currentUser, loading } = this.props\n    if (loading) return null\n    if (!isEmpty(currentUser)) return <PrivateRoutes />\n    return <PublicRoutes />\n  }\n}\n\nconst mapStateToProps = (state) => ( console.log(state), {\n  currentUser: state.session.data,\n  loading: state.session.loading\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUser: () => dispatch(sessionShowRequest('authentications'))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Session)\n"]},"metadata":{},"sourceType":"module"}