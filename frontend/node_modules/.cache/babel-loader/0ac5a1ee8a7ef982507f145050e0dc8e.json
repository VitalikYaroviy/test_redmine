{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { middleware as thunkMiddleware } from 'redux-saga-thunk';\nimport { createLogger } from 'redux-logger';\nimport reducer from './reducer';\nimport rootSaga from './sagas';\n\nconst configureStore = (initState, services = {}) => {\n  const logger = createLogger({\n    collapsed: true,\n    diff: true\n  });\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, initState, applyMiddleware(logger, thunkMiddleware, sagaMiddleware));\n  sagaMiddleware.run(rootSaga, services);\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/store/configure.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","middleware","thunkMiddleware","createLogger","reducer","rootSaga","configureStore","initState","services","logger","collapsed","diff","sagaMiddleware","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,UAAU,IAAIC,eAAvB,QAA8C,kBAA9C;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,SAArB;;AAEA,MAAMC,cAAc,GAAG,CAACC,SAAD,EAAYC,QAAQ,GAAG,EAAvB,KAA8B;AACnD,QAAMC,MAAM,GAAGN,YAAY,CAAC;AAC1BO,IAAAA,SAAS,EAAE,IADe;AAE1BC,IAAAA,IAAI,EAAE;AAFoB,GAAD,CAA3B;AAKA,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,QAAMa,KAAK,GAAGf,WAAW,CACvBM,OADuB,EAEvBG,SAFuB,EAGvBR,eAAe,CAACU,MAAD,EAASP,eAAT,EAA0BU,cAA1B,CAHQ,CAAzB;AAMAA,EAAAA,cAAc,CAACE,GAAf,CAAmBT,QAAnB,EAA6BG,QAA7B;AACA,SAAOK,KAAP;AACD,CAfD;;AAiBA,eAAeP,cAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { middleware as thunkMiddleware } from 'redux-saga-thunk'\nimport { createLogger } from 'redux-logger'\n\nimport reducer from './reducer'\nimport rootSaga from './sagas'\n\nconst configureStore = (initState, services = {}) => {\n  const logger = createLogger({\n    collapsed: true,\n    diff: true\n  })\n\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    reducer,\n    initState,\n    applyMiddleware(logger, thunkMiddleware, sagaMiddleware)\n  )\n\n  sagaMiddleware.run(rootSaga, services)\n  return store\n}\n\nexport default configureStore"]},"metadata":{},"sourceType":"module"}