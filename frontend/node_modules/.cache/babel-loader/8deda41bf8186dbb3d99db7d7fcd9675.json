{"ast":null,"code":"import { put, call, takeLatest } from 'redux-saga/effects'; // import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions'; // function* createSession(api, { data }, { resource, thunk }) {\n//   try {\n//     const detail = yield call([api, api.post], `/${resource}`,  data)\n//     yield put(actions.sessionCreateSuccess(resource, detail, { data }, thunk))\n//   } catch (e) {\n//     yield put(actions.sessionCreateFailure(resource, e, { data }, thunk))\n//   }\n// }\n\nfunction* getJobs(api, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`);\n    yield put(actions.getJobsSuccess(resource, detail, thunk));\n  } catch (e) {\n    yield put(actions.getJobsFailure(resource, e, thunk));\n  }\n} // function* deleteSession(api, { resource, thunk }) {\n//   try {\n//     const detail = yield call([api, api.delete], `/${resource}`)\n//     yield put(actions.sessionDeleteSuccess(resource, detail, thunk))\n//     // toastr.success('Success', 'You successfully loggout!')\n//   } catch (e) {\n//     yield put(actions.sessionDeleteFailure(resource, e, thunk))\n//     // toastr.error('Oops! Something went wrong...')\n//   }\n// }\n// function* watchSessionCreateRequest(api, { payload, meta }) {\n//   yield call(createSession, api, payload, meta)\n// }\n\n\nfunction* watchGetJobsRequest(api, {\n  meta\n}) {\n  yield call(getJobs, api, meta);\n} // function* watchSessionDeleteRequest(api, { meta }) {\n//   yield call(deleteSession, api, meta)\n// }\n\n\nexport default function* ({\n  api\n}) {\n  // yield takeLatest(actions.SESSION_CREATE_REQUEST, watchSessionCreateRequest, api)\n  yield takeLatest(actions.SESSION_SHOW_REQUEST, watchGetJobsRequest, api); // yield takeLatest(actions.SESSION_DELETE_REQUEST, watchSessionDeleteRequest, api)\n}","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/store/jobs/sagas.js"],"names":["put","call","takeLatest","actions","getJobs","api","resource","thunk","detail","get","getJobsSuccess","e","getJobsFailure","watchGetJobsRequest","meta","SESSION_SHOW_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC,C,CACA;;AAEA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,OAAV,CAAkBC,GAAlB,EAAuB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAvB,EAA4C;AAC1C,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAAC,CAACI,GAAD,EAAMA,GAAG,CAACI,GAAV,CAAD,EAAkB,IAAGH,QAAS,EAA9B,CAAzB;AACA,UAAMN,GAAG,CAACG,OAAO,CAACO,cAAR,CAAuBJ,QAAvB,EAAiCE,MAAjC,EAAyCD,KAAzC,CAAD,CAAT;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV,UAAMX,GAAG,CAACG,OAAO,CAACS,cAAR,CAAuBN,QAAvB,EAAiCK,CAAjC,EAAoCJ,KAApC,CAAD,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,UAAUM,mBAAV,CAA8BR,GAA9B,EAAmC;AAAES,EAAAA;AAAF,CAAnC,EAA6C;AAC3C,QAAMb,IAAI,CAACG,OAAD,EAAUC,GAAV,EAAeS,IAAf,CAAV;AACD,C,CAED;AACA;AACA;;;AAEA,eAAe,WAAW;AAAET,EAAAA;AAAF,CAAX,EAAoB;AACjC;AACA,QAAMH,UAAU,CAACC,OAAO,CAACY,oBAAT,EAA+BF,mBAA/B,EAAoDR,GAApD,CAAhB,CAFiC,CAGjC;AACD","sourcesContent":["import { put, call, takeLatest } from 'redux-saga/effects'\n// import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions'\n\n// function* createSession(api, { data }, { resource, thunk }) {\n//   try {\n//     const detail = yield call([api, api.post], `/${resource}`,  data)\n//     yield put(actions.sessionCreateSuccess(resource, detail, { data }, thunk))\n//   } catch (e) {\n//     yield put(actions.sessionCreateFailure(resource, e, { data }, thunk))\n//   }\n// }\n\nfunction* getJobs(api, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`)\n    yield put(actions.getJobsSuccess(resource, detail, thunk))\n  } catch (e) {\n    yield put(actions.getJobsFailure(resource, e, thunk))\n  }\n}\n\n// function* deleteSession(api, { resource, thunk }) {\n//   try {\n//     const detail = yield call([api, api.delete], `/${resource}`)\n//     yield put(actions.sessionDeleteSuccess(resource, detail, thunk))\n//     // toastr.success('Success', 'You successfully loggout!')\n//   } catch (e) {\n//     yield put(actions.sessionDeleteFailure(resource, e, thunk))\n//     // toastr.error('Oops! Something went wrong...')\n//   }\n// }\n\n// function* watchSessionCreateRequest(api, { payload, meta }) {\n//   yield call(createSession, api, payload, meta)\n// }\n\nfunction* watchGetJobsRequest(api, { meta }) {\n  yield call(getJobs, api, meta)\n}\n\n// function* watchSessionDeleteRequest(api, { meta }) {\n//   yield call(deleteSession, api, meta)\n// }\n\nexport default function* ({ api }) {\n  // yield takeLatest(actions.SESSION_CREATE_REQUEST, watchSessionCreateRequest, api)\n  yield takeLatest(actions.SESSION_SHOW_REQUEST, watchGetJobsRequest, api)\n  // yield takeLatest(actions.SESSION_DELETE_REQUEST, watchSessionDeleteRequest, api)\n}"]},"metadata":{},"sourceType":"module"}