{"ast":null,"code":"import { put, call, takeLatest } from 'redux-saga/effects'; // import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions';\n\nfunction* createSession(api, {\n  data\n}, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.post], `/${resource}`, data);\n    yield put(actions.sessionCreateSuccess(resource, detail, {\n      data\n    }, thunk));\n  } catch (e) {\n    yield put(actions.sessionCreateFailure(resource, e, {\n      data\n    }, thunk));\n  }\n}\n\nfunction* showSession(api, {\n  resource,\n  thunk\n}) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`);\n    yield put(actions.sessionShowSuccess(resource, detail, thunk));\n  } catch (e) {\n    yield put(actions.sessionShowFailure(resource, e, thunk));\n  }\n}\n\nfunction* watchSessionCreateRequest(api, {\n  payload,\n  meta\n}) {\n  yield call(createSession, api, payload, meta);\n}\n\nfunction* watchSessionShowRequest(api, {\n  meta\n}) {\n  yield call(showSession, api, meta);\n}\n\nfunction* watchSessionDeleteRequest(api, {\n  meta\n}) {\n  yield call(deleteSession, api, meta);\n}\n\nexport default function* ({\n  api\n}) {\n  yield takeLatest(actions.SESSION_CREATE_REQUEST, watchSessionCreateRequest, api);\n  yield takeLatest(actions.SESSION_SHOW_REQUEST, watchSessionShowRequest, api);\n  yield takeLatest(actions.RESOURCE_DELETE_REQUEST, watchSessionDeleteRequest, api);\n}","map":{"version":3,"sources":["/home/vitalik/work/test/ideaboard-api/frontend/src/store/sessions/sagas.js"],"names":["put","call","takeLatest","actions","createSession","api","data","resource","thunk","detail","post","sessionCreateSuccess","e","sessionCreateFailure","showSession","get","sessionShowSuccess","sessionShowFailure","watchSessionCreateRequest","payload","meta","watchSessionShowRequest","watchSessionDeleteRequest","deleteSession","SESSION_CREATE_REQUEST","SESSION_SHOW_REQUEST","RESOURCE_DELETE_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC,C,CACA;;AAEA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;;AAEA,UAAUC,aAAV,CAAwBC,GAAxB,EAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAAuC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAvC,EAA4D;AAC1D,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAAC,CAACI,GAAD,EAAMA,GAAG,CAACK,IAAV,CAAD,EAAmB,IAAGH,QAAS,EAA/B,EAAmCD,IAAnC,CAAzB;AACA,UAAMN,GAAG,CAACG,OAAO,CAACQ,oBAAR,CAA6BJ,QAA7B,EAAuCE,MAAvC,EAA+C;AAAEH,MAAAA;AAAF,KAA/C,EAAyDE,KAAzD,CAAD,CAAT;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV,UAAMZ,GAAG,CAACG,OAAO,CAACU,oBAAR,CAA6BN,QAA7B,EAAuCK,CAAvC,EAA0C;AAAEN,MAAAA;AAAF,KAA1C,EAAoDE,KAApD,CAAD,CAAT;AACD;AACF;;AAED,UAAUM,WAAV,CAAsBT,GAAtB,EAA2B;AAAEE,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3B,EAAgD;AAC9C,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAAC,CAACI,GAAD,EAAMA,GAAG,CAACU,GAAV,CAAD,EAAkB,IAAGR,QAAS,EAA9B,CAAzB;AACA,UAAMP,GAAG,CAACG,OAAO,CAACa,kBAAR,CAA2BT,QAA3B,EAAqCE,MAArC,EAA6CD,KAA7C,CAAD,CAAT;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACV,UAAMZ,GAAG,CAACG,OAAO,CAACc,kBAAR,CAA2BV,QAA3B,EAAqCK,CAArC,EAAwCJ,KAAxC,CAAD,CAAT;AACD;AACF;;AAED,UAAUU,yBAAV,CAAoCb,GAApC,EAAyC;AAAEc,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAzC,EAA4D;AAC1D,QAAMnB,IAAI,CAACG,aAAD,EAAgBC,GAAhB,EAAqBc,OAArB,EAA8BC,IAA9B,CAAV;AACD;;AAED,UAAUC,uBAAV,CAAkChB,GAAlC,EAAuC;AAAEe,EAAAA;AAAF,CAAvC,EAAiD;AAC/C,QAAMnB,IAAI,CAACa,WAAD,EAAcT,GAAd,EAAmBe,IAAnB,CAAV;AACD;;AAED,UAAUE,yBAAV,CAAoCjB,GAApC,EAAyC;AAAEe,EAAAA;AAAF,CAAzC,EAAmD;AACjD,QAAMnB,IAAI,CAACsB,aAAD,EAAgBlB,GAAhB,EAAqBe,IAArB,CAAV;AACD;;AAED,eAAe,WAAW;AAAEf,EAAAA;AAAF,CAAX,EAAoB;AACjC,QAAMH,UAAU,CAACC,OAAO,CAACqB,sBAAT,EAAiCN,yBAAjC,EAA4Db,GAA5D,CAAhB;AACA,QAAMH,UAAU,CAACC,OAAO,CAACsB,oBAAT,EAA+BJ,uBAA/B,EAAwDhB,GAAxD,CAAhB;AACA,QAAMH,UAAU,CAACC,OAAO,CAACuB,uBAAT,EAAkCJ,yBAAlC,EAA6DjB,GAA7D,CAAhB;AACD","sourcesContent":["import { put, call, takeLatest } from 'redux-saga/effects'\n// import { toastr } from 'react-redux-toastr'\n\nimport * as actions from './actions'\n\nfunction* createSession(api, { data }, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.post], `/${resource}`,  data)\n    yield put(actions.sessionCreateSuccess(resource, detail, { data }, thunk))\n  } catch (e) {\n    yield put(actions.sessionCreateFailure(resource, e, { data }, thunk))\n  }\n}\n\nfunction* showSession(api, { resource, thunk }) {\n  try {\n    const detail = yield call([api, api.get], `/${resource}`)\n    yield put(actions.sessionShowSuccess(resource, detail, thunk))\n  } catch (e) {\n    yield put(actions.sessionShowFailure(resource, e, thunk))\n  }\n}\n\nfunction* watchSessionCreateRequest(api, { payload, meta }) {\n  yield call(createSession, api, payload, meta)\n}\n\nfunction* watchSessionShowRequest(api, { meta }) {\n  yield call(showSession, api, meta)\n}\n\nfunction* watchSessionDeleteRequest(api, { meta }) {\n  yield call(deleteSession, api, meta)\n}\n\nexport default function* ({ api }) {\n  yield takeLatest(actions.SESSION_CREATE_REQUEST, watchSessionCreateRequest, api)\n  yield takeLatest(actions.SESSION_SHOW_REQUEST, watchSessionShowRequest, api)\n  yield takeLatest(actions.RESOURCE_DELETE_REQUEST, watchSessionDeleteRequest, api)\n}"]},"metadata":{},"sourceType":"module"}